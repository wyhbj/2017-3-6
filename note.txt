ajax:
	Asynchronous JavaScript and XML  
	异步的   js  和  XML
	XML一般用来存储数据的，这种类似于html的展示形式可以自定义标签，一般使用要遵循一定的规则。
	前后端数据交互的一种技术，其实它并不是一种新技术，而是多个老技术结合在一起的能够完成交互任务的技术手段。
	优点:
		当用户操作页面的时候，不刷新页面只刷新数据，使得优化用户体验
		大大减少服务器压力。
		把ajax发扬光大的是google	
		更改集成环境帖子：
			http://jingyan.baidu.com/article/f0e83a25a4e5ac22e5910135.html
		ajax吐出来的数据都为字符串。
		[name,'leo'] 'name=leo'
		json  = '{}'  '[]'
		obj = {}
 		xml
		''
	容易掉坑：
		如果直接在本地打开，是运行不了php文件 ，所以每次打开的时候都通过localhost访问
		千万别在file协议下打开
	打电话模型：
		1.有一个电话
		2.输入号码
		3.拨号-按绿色的按钮
		4.等待
		5.通话
	ajax交互模型:
		1.创建ajax对象
		2.填写请求信息（请求的方式,请求地址,是否异步）
		3.发送请求
		4.等待服务器响应
		5.会话
	user.onblur = function(){
		var val = user.value;
		var ajax = new XMLHttpRequest(); //相当于买了个电话。1.创建一个ajax对象
		/*
			ajax.open();
			3个参数:
				第一个参数：
					用什么方式去请求  get post
				第二个参数:
					请求的地址
				第三个参数:
					是否异步（默认为true）
					同步就设置为false
		*/
		ajax.open('get','php/get.php?user='+val);//3个参数  相当于拨号
		//发送请求。通过send可以将本次请求发送给后端
		ajax.send();//相当于发送
		ajax.onload = function(){//等待服务器返回相应的数据。
			//相当于通话
			// ajax.responseText 收到会话结果。
			span.innerHTML = ajax.responseText;
		}
	}
	get方式请求：
		通过url地址栏信息，进行传输。
		从安全角度来说：
			不安全
		只要不是发送特别大数据或者不是个人隐私方面的数据，都直接可以用get。
		传输数据的大小也是有限的。
		因为每个浏览器的url长度是不一样的，所以传输数据的体积也会被限制。
	get方式在填写地址栏的时候，就要把传给后端的数据绑在填写的地址身上。
	在URL地址栏解析数据的时候，IE下中文乱码，要通过encodeURI将中文转成地址栏编码格式才能正常请求。
	如果涉及到在IE下传输中文，那么需要用encodeURI去转一下，不然解析会出问题
	ajax.open('get','php/get.php?user='+encodeURI(val));
	post：
		传输方式是通过服务器发送的方式进行传输。
		从安全角度来说：
		相对安全。
			用户的私人信息、体积比较大的数据，必须用post
			体积：
				理论上来说，传输的数据是无限大的。（但是后端同学会给出一个大小限制）
			在open的时候就不用将传输的数据绑定上去了,那么传输的数据应该放在send中
			需要在发送前添加一个请求头信息
				ajax.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
			因为设置了请求头，在发送数据前，就已经将数据格式统一了，所以不会出现中文编码错误的问题
	user.onblur = function(){
		var val = this.value;
		var ajax = new XMLHttpRequest();
		ajax.open('post','php/post.php');
		ajax.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		ajax.send('user='+val);
		ajax.onload = function(){
			span.innerHTML = ajax.responseText;
		}
	}
	会不会ajax，这个技术如何实现的并不是重点，重点在于，拿到数据之后如何处理数据
	通过这5步拿到这些数据
	var json =JSON.parse(ajax.responseText);
	var json = eval('('+ajax.responseText+')');
	var json = (new Function('','return'+ajax.responseText))();
	if(json.code){ //0
		user.style.border = '1px solid red';
	}else{
		user.style.border = '1px solid green';
	}
	span.innerHTML = json.msg;
	eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码 
	在代码本身没错，但是报错的情况下，用括号包一下。
	注意：
		eval容易被注入病毒。慎用!
	new Function('参数','字符串'); 也是可以将字符串执行成js代码。
	直接new内置对象，性能略低。
	同步：
		同步在send发送后，需要等待服务器处理完毕（在完毕前不会执行后续的代码）
		提交请求->等待服务器处理->处理完毕返回 这个期间客户端浏览器不能干任何事
	异步: 请求通过事件触发->服务器处理（这是浏览器仍然可以作其他事情）->处理完毕
		异步在send发送后，不需要等待服务器处理完毕（在完毕前会执行后续的代码）
	如果解析xml:
		ajax.responsXML来解析XML数据 -> 自动就转了DOM结构，可以通过DOM的获取方式去获取数据。
		在IE下，children是不支持的，用tagName来获取
		ajax.responseXML.getElementsByTagName('content')[0];	